library(devtools)
library(roxygen2)
dptd <- function(u, pi, S) {
sapply(u, function(x){
-pi %*% expm::expm(S *  x) %*% S %*% rep(1, length(pi))})
}
curve(dptd(x,1,-1))
dptd <- function(u, pi, S) {
sapply(u, function(x){
if(length(pi) == 1){
-pi * exp(S*x)*S
}else{
-pi %*% expm::expm(S *  x) %*% S %*% rep(1, length(pi))
}
})
}
curve(dptd(x,1,-1))
?dnorm
curve(dptd(x, 1, -2)
curve(dptd(x, 1, -2))
curve(dptd(x, 1, -2))
library(phtype)
install.packages(Rtools)
library(phtype)
#' CDF of Phase-Type distribution
#'
#' @param u Vector of quantiles
#' @param pi Initial distribution
#' @param S Subintensity matrix
#'
#' @return Returns the probability
#' @export
#'
#' @examples pptd(0.5, 1, -2)
pptd <- function(u, pi, S) {
sapply(u, function(x){
if(length(pi) == 1){
1 -pi * exp(S*x)
}else{
1-pi %*% expm(S *  x) %*% rep(1, length(pi))
}
})
}
pptd(0.5, 1, -2)
pexp(0.5,2)
library(phtype)
m = 5
pi = c(1, rep(0, m-2))
lambdas = sapply(2:m, function(x){choose(x,2)/x})
S = matrix(append(sapply(lambdas[-(m-1)], function(x){
c(-x, x, rep(0, m-2))}), -lambdas[m-1]),
nrow = m-1, byrow = T)
hist(rptd(10^3, pi, S), breaks = 20, freq = F)
curve(dptd(x, pi, S), add = T)
library(phtype)
?reward
?curve
library(phtype)
library(phtype)
solve(3)
MomentPH <- function(pi, S, order){
sapply(x, function(x){
factorial(x) * pi %*% (solve(-S) %^% x) %*% rep(1,length(pi))
})
}
VarMRCA(4:5)
#' Variance of time from most recent common ancestor of n individuals
#'
#' @param n Amount of individuals
#'
#' @return the variance value of the phase-type.
#' @export
#'
#' @examples
#' VarMRCA(4:5)
VarMRCA <- function(n){
sapply(n, function(y){
pi = c(1, rep(0,y-2)) #n-2, since T_1 er abs. state, and first pos. is known.
lambdas = sapply(2:y, function(x){choose(x,2)})
if(y == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(y-1)], function(x){
c(-x, x, rep(0, y-2))}), -lambdas[y-1]),
nrow = y-1, byrow = T)
}
mptd(pi, S, 2) - mptd(pi, S, 1)^2
})
}
VarMRCA(4:5)
#' Moment of phase-type distribution
#'
#' @param pi Initial distribution
#' @param S Subintensity matrix
#' @param order Order of moment wanted (1 for mean)
#'
#' @return The calculated moment
#' @export
mptd <- function(pi, S, order){
sapply(x, function(x){
factorial(x) * pi %*% (solve(-S) %^% x) %*% rep(1,length(pi))
})
}
VarMRCA(4:5)
VarMRCA(4)
#' Variance of time from most recent common ancestor of n individuals
#'
#' @param n Amount of individuals
#'
#' @return the variance value of the phase-type.
#' @export
#'
#' @examples
#' VarMRCA(4:5)
VarMRCA <- function(n){
sapply(n, function(y){
pi = c(1, rep(0,y-2)) #n-2, since T_1 er abs. state, and first pos. is known.
lambdas = sapply(2:y, function(x){choose(x,2)})
if(y == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(y-1)], function(x){
c(-x, x, rep(0, y-2))}), -lambdas[y-1]),
nrow = y-1, byrow = T)
}
mptd(pi, S, 2) - mptd(pi, S, 1)^2
})
}
VarMRCA(4)
VarMRCAPH(4)
VarMRCA(4)
#' Moment of phase-type distribution
#'
#' @param pi Initial distribution
#' @param S Subintensity matrix
#' @param order Order of moment wanted (1 for mean)
#'
#' @return The calculated moment
#' @export
mptd <- function(pi, S, order){
sapply(x, function(x){
factorial(x) * pi %*% (solve(-S) %^% x) %*% rep(1,length(pi))
})
}
n = 4
pi = c(1, rep(0,y-2))#n-2, since T_1 er abs. state, and first pos. is known.
sapply(n, function(y){
pi = c(1, rep(0,y-2))#n-2, since T_1 er abs. state, and first pos. is known.
lambdas = sapply(2:y, function(x){choose(x,2)})
if(y == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(y-1)], function(x){
c(-x, x, rep(0, y-2))}), -lambdas[y-1]),
nrow = y-1, byrow = T)
}
mptd(pi, S, 1)
})
y = 5
pi = c(1, rep(0,y-2))#n-2, since T_1 er abs. state, and first pos. is known.
lambdas = sapply(2:y, function(x){choose(x,2)})
S = matrix(append(sapply(lambdas[-(y-1)], function(x){
c(-x, x, rep(0, y-2))}), -lambdas[y-1]),
nrow = y-1, byrow = T)
S
pi
mptd(pi,S,2)
#' Moment of phase-type distribution
#'
#' @param pi Initial distribution
#' @param S Subintensity matrix
#' @param order Order of moment wanted (1 for mean)
#'
#' @return The calculated moment
#' @export
mptd <- function(pi, S, order){
sapply(x, function(y){
factorial(y) * pi %*% (solve(-S) %^% y) %*% rep(1,length(pi))
})
}
VarMRCA(4)
#' Variance of time from most recent common ancestor of n individuals
#'
#' @param n Amount of individuals
#'
#' @return the variance value of the phase-type.
#' @export
#'
#' @examples
#' VarMRCA(4:5)
VarMRCA <- function(n){
sapply(n, function(y){
pi = c(1, rep(0,y-2)) #n-2, since T_1 er abs. state, and first pos. is known.
lambdas = sapply(2:y, function(x){choose(x,2)})
if(y == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(y-1)], function(x){
c(-x, x, rep(0, y-2))}), -lambdas[y-1]),
nrow = y-1, byrow = T)
}
mptd(pi, S, 2) - mptd(pi, S, 1)^2
})
}
VarMRCA(4)
mptd(pi,S,2)
#' Moment of phase-type distribution
#'
#' @param pi Initial distribution
#' @param S Subintensity matrix
#' @param order Order of moment wanted (1 for mean)
#'
#' @return The calculated moment
#' @export
mptd <- function(pi, S, order){
sapply(order, function(y){
factorial(y) * pi %*% (solve(-S) %^% y) %*% rep(1,length(pi))
})
}
VarMRCA(4)
#' Variance of time from most recent common ancestor of n individuals
#'
#' @param n Amount of individuals
#'
#' @return the variance value of the phase-type.
#' @export
#'
#' @examples
#' VarMRCA(4:5)
VarMRCA <- function(n){
sapply(n, function(y){
pi = c(1, rep(0,y-2)) #n-2, since T_1 er abs. state, and first pos. is known.
lambdas = sapply(2:y, function(x){choose(x,2)})
if(y == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(y-1)], function(x){
c(-x, x, rep(0, y-2))}), -lambdas[y-1]),
nrow = y-1, byrow = T)
}
mptd(pi, S, 2) - mptd(pi, S, 1)^2
})
}
VarMRCA(4)
#' Moment of phase-type distribution
#'
#' @param pi Initial distribution
#' @param S Subintensity matrix
#' @param order Order of moment wanted (1 for mean)
#'
#' @return The calculated moment
#' @export
mptd <- function(pi, S, order){
sapply(order, function(y){
factorial(y) * pi %*% (solve(-S) expm::%^% y) %*% rep(1,length(pi))
})
}
#' Moment of phase-type distribution
#'
#' @param pi Initial distribution
#' @param S Subintensity matrix
#' @param order Order of moment wanted (1 for mean)
#'
#' @return The calculated moment
#' @export
mptd <- function(pi, S, order){
sapply(order, function(y){
factorial(y) * pi %*% (expm::`%^%`(solve(-S),y)) %*% rep(1,length(pi))
})
}
VarMRCA(4)
VarMRCA(5)
VarMRCA(4:5)
#' @return The density in u
#' @export
#'
#' @examples
#' n = c(2,5,10,100)
#' col = rainbow(length(n))
#' for(i in 1:length(n)){
#'   curve(dMRCA(n = n[i], x), 0, 4, col = col[i], add = i!=1, ylim= c(0,0.9))
#' }
#' legend(2.5,1,paste("n = ",n, sep = ""), col=col, lty=1)
dMRCA <- function(n, u) {
pi = c(1, rep(0,n-2))
lambdas = sapply(2:n, function(x){choose(x,2)})
if(n == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(n-1)], function(x){
c(-x, x, rep(0, n-2))}), -lambdas[n-1]),
nrow = n-1, byrow = T)
}
dptd(u, pi, S)
}
n = c(2,5,10,100)
col = rainbow(length(n))
for(i in 1:length(n)){
curve(dMRCA(n = n[i], x), 0, 4, col = col[i], add = i!=1, ylim= c(0,0.9))
}
legend(2.5,1,paste("n = ",n, sep = ""), col=col, lty=1)
#' @return the density in u
#' @export
#'
#' @examples
#' n = c(2, 5, 10, 20, 50, 100)
#' col = rainbow(length(n))
#' for(i in 1:length(n)){
#'   curve(sapply(x, function(y){
#'     dTotal(n = n[i], y)}), 0, 14, col = col[i], add = i!=1)
#' }
dTotal <- function(n, u) {
pi = c(1, rep(0,n-2))
lambdas = sapply(2:n, function(x){ (x-1)/2 })
if(n == 2){
S = matrix(-(lambdas[1]))
} else {
S = matrix(append(sapply(lambdas[-(n-1)], function(x){
c(-x, x, rep(0, n-2))}), -lambdas[n-1]),
nrow = n-1, byrow = T)
}
dptd(u, pi, S)
}
n = c(2, 5, 10, 20, 50, 100)
col = rainbow(length(n))
for(i in 1:length(n)){
curve(sapply(x, function(y){
dTotal(n = n[i], y)}), 0, 14, col = col[i], add = i!=1)
}
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
library(phtype)
install.packages("available")
library(avaiable)
library(avaiable)
library(available)
available(phtype)
available("phtype")
TRUE
true
True
stats::rexp()
library(phtype)
use_package("expm")
library(phtype)
library(phtype)
library(installr)
